syntax = "proto3";

package auth;

import "google/protobuf/timestamp.proto";
option go_package = "proto/auth";


message User {
  string Id = 1;
  string Name = 2;
  string Surname = 3;
  string Avatar = 4;
  string Email = 5;
  string CountryCode = 6;
}

message Session {
  string Id = 1;
  string UserId = 2;
  string DeviceName = 3;
  string ClientVersion = 4;
  string RefreshToken = 5;
  string FCMToken = 6;
  google.protobuf.Timestamp CreatedAt = 7;
}

message CreateUserRequest {
  string Name = 1;
  string Surname = 2;
  string Email = 3;
  string Password = 4;
}

message UpdateUserRequest {
  string Id = 1;
  string Name = 2;
  string Surname = 3;
  string Email = 4;
  string OldPassword = 5;
  string NewPassword = 6;
  string Avatar = 7;
  string CountryCode = 8;
}

message AuthRequest {
  string Email = 1;
  string Password = 2;
}

message OAuthRequest {
  string Token = 1;
}

message UserIdRequest {
  string Id = 1;
}

message FCMTokenRequest {
  string UserId = 1;
  string SessionId = 2;
  string FCMToken = 3; 
}

message CloseSessionRequest {
  string UserId = 1;
  string SessionId = 2;
}

message TokenRequest {
  string Token = 1;
}

message RefreshTokenRequest {
  string UserId = 1;
  string RefreshToken = 2;
  string SessionId = 3;
}

message SetSessionInfoRequest {
  string SessionId = 1;
  string DeviceName = 2;
  string ClientVersion = 3;
}

message TokenPairResponse {
	string Token = 1;
	string RefreshToken = 2;
}

message AuthResponse {
  string Token = 1;
  string RefreshToken = 2;
  User   User = 3;
}

message FCMTokensResponse {
  repeated string FCMTokens = 1;
}

message UserSessionsResponse {
  repeated Session Sessions = 1;
}

message EmptyResponse {}

service AuthService {
  // AuthUserByEmail authorizations user by login/pass
  rpc AuthUserByEmail(AuthRequest) returns (AuthResponse){};
  // AuthUserByFirebase authorizations user by firebase token
  rpc AuthUserByFirebase(OAuthRequest) returns (AuthResponse){};
  // RefreshToken resfreshes user jwt token
  rpc RefreshToken(RefreshTokenRequest) returns (TokenPairResponse){};
  // CreateUser creates a new user
  rpc CreateUser(CreateUserRequest) returns (User) {};
  // DeleteUser deletes user
  rpc DeleteUser(UserIdRequest) returns (EmptyResponse) {};
  // UpdateUser updates user info
  rpc UpdateUser(UpdateUserRequest) returns (User) {};
  // GetUserById gets user by id
  rpc GetUserById(UserIdRequest) returns (User) {};
  // GetUserByToken gets user by jwt token
  rpc GetSessionByToken(TokenRequest) returns (Session) {};
  // SaveUserFCMToken saves new fcm token
  rpc SaveUserFCMToken(FCMTokenRequest) returns (EmptyResponse) {};
  // GetUserFCMTokens get user's fcm tokens 
  rpc GetUserFCMTokens(UserIdRequest) returns (FCMTokensResponse) {};
  // GetUserSessions get active user's sessions
  rpc GetUserSessions(UserIdRequest) returns (UserSessionsResponse) {};
  // CloseSession kill user session by device
  rpc CloseSession(CloseSessionRequest) returns(EmptyResponse) {};
  // SetSessionInfo sets info about session - device name and client version
  rpc SetSessionInfo(SetSessionInfoRequest) returns(EmptyResponse){};
}