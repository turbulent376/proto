// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package activity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActivityServiceClient is the client API for ActivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityServiceClient interface {
	// Create creates a new sample
	Create(ctx context.Context, in *CreateActivityRequest, opts ...grpc.CallOption) (*Activity, error)
	// Update updates an existent sample
	Update(ctx context.Context, in *UpdateActivityRequest, opts ...grpc.CallOption) (*Activity, error)
	// Get retrieves a sample by id
	Get(ctx context.Context, in *ActivityIdRequest, opts ...grpc.CallOption) (*Activity, error)
	// Search retrieves samples by owner
	ListActivities(ctx context.Context, in *ListActivitiesRequest, opts ...grpc.CallOption) (*ListActivitiesResponse, error)
	// Search retrieves samples by family
	ListActivitiesByFamily(ctx context.Context, in *ListActivitiesByFamilyRequest, opts ...grpc.CallOption) (*ListActivitiesResponse, error)
	// Delete sample
	Delete(ctx context.Context, in *ActivityIdRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Create creates a new sample
	CreateActivityType(ctx context.Context, in *CreateActivityTypeRequest, opts ...grpc.CallOption) (*ActivityType, error)
	// Update updates an existent sample
	UpdateActivityType(ctx context.Context, in *UpdateActivityTypeRequest, opts ...grpc.CallOption) (*ActivityType, error)
	// Get retrieves a sample by id
	GetActivityType(ctx context.Context, in *ActivityTypeIdRequest, opts ...grpc.CallOption) (*ActivityType, error)
	// Search searches samples
	ListActivityTypes(ctx context.Context, in *ListActivityTypesRequest, opts ...grpc.CallOption) (*ListActivityTypesResponse, error)
	// Delete sample
	DeleteActivityType(ctx context.Context, in *ActivityTypeIdRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type activityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityServiceClient(cc grpc.ClientConnInterface) ActivityServiceClient {
	return &activityServiceClient{cc}
}

func (c *activityServiceClient) Create(ctx context.Context, in *CreateActivityRequest, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := c.cc.Invoke(ctx, "/activity.ActivityService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) Update(ctx context.Context, in *UpdateActivityRequest, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := c.cc.Invoke(ctx, "/activity.ActivityService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) Get(ctx context.Context, in *ActivityIdRequest, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := c.cc.Invoke(ctx, "/activity.ActivityService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) ListActivities(ctx context.Context, in *ListActivitiesRequest, opts ...grpc.CallOption) (*ListActivitiesResponse, error) {
	out := new(ListActivitiesResponse)
	err := c.cc.Invoke(ctx, "/activity.ActivityService/ListActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) ListActivitiesByFamily(ctx context.Context, in *ListActivitiesByFamilyRequest, opts ...grpc.CallOption) (*ListActivitiesResponse, error) {
	out := new(ListActivitiesResponse)
	err := c.cc.Invoke(ctx, "/activity.ActivityService/ListActivitiesByFamily", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) Delete(ctx context.Context, in *ActivityIdRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/activity.ActivityService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) CreateActivityType(ctx context.Context, in *CreateActivityTypeRequest, opts ...grpc.CallOption) (*ActivityType, error) {
	out := new(ActivityType)
	err := c.cc.Invoke(ctx, "/activity.ActivityService/CreateActivityType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) UpdateActivityType(ctx context.Context, in *UpdateActivityTypeRequest, opts ...grpc.CallOption) (*ActivityType, error) {
	out := new(ActivityType)
	err := c.cc.Invoke(ctx, "/activity.ActivityService/UpdateActivityType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetActivityType(ctx context.Context, in *ActivityTypeIdRequest, opts ...grpc.CallOption) (*ActivityType, error) {
	out := new(ActivityType)
	err := c.cc.Invoke(ctx, "/activity.ActivityService/GetActivityType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) ListActivityTypes(ctx context.Context, in *ListActivityTypesRequest, opts ...grpc.CallOption) (*ListActivityTypesResponse, error) {
	out := new(ListActivityTypesResponse)
	err := c.cc.Invoke(ctx, "/activity.ActivityService/ListActivityTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) DeleteActivityType(ctx context.Context, in *ActivityTypeIdRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/activity.ActivityService/DeleteActivityType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityServiceServer is the server API for ActivityService service.
// All implementations must embed UnimplementedActivityServiceServer
// for forward compatibility
type ActivityServiceServer interface {
	// Create creates a new sample
	Create(context.Context, *CreateActivityRequest) (*Activity, error)
	// Update updates an existent sample
	Update(context.Context, *UpdateActivityRequest) (*Activity, error)
	// Get retrieves a sample by id
	Get(context.Context, *ActivityIdRequest) (*Activity, error)
	// Search retrieves samples by owner
	ListActivities(context.Context, *ListActivitiesRequest) (*ListActivitiesResponse, error)
	// Search retrieves samples by family
	ListActivitiesByFamily(context.Context, *ListActivitiesByFamilyRequest) (*ListActivitiesResponse, error)
	// Delete sample
	Delete(context.Context, *ActivityIdRequest) (*EmptyResponse, error)
	// Create creates a new sample
	CreateActivityType(context.Context, *CreateActivityTypeRequest) (*ActivityType, error)
	// Update updates an existent sample
	UpdateActivityType(context.Context, *UpdateActivityTypeRequest) (*ActivityType, error)
	// Get retrieves a sample by id
	GetActivityType(context.Context, *ActivityTypeIdRequest) (*ActivityType, error)
	// Search searches samples
	ListActivityTypes(context.Context, *ListActivityTypesRequest) (*ListActivityTypesResponse, error)
	// Delete sample
	DeleteActivityType(context.Context, *ActivityTypeIdRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedActivityServiceServer()
}

// UnimplementedActivityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActivityServiceServer struct {
}

func (UnimplementedActivityServiceServer) Create(context.Context, *CreateActivityRequest) (*Activity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedActivityServiceServer) Update(context.Context, *UpdateActivityRequest) (*Activity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedActivityServiceServer) Get(context.Context, *ActivityIdRequest) (*Activity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedActivityServiceServer) ListActivities(context.Context, *ListActivitiesRequest) (*ListActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActivities not implemented")
}
func (UnimplementedActivityServiceServer) ListActivitiesByFamily(context.Context, *ListActivitiesByFamilyRequest) (*ListActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActivitiesByFamily not implemented")
}
func (UnimplementedActivityServiceServer) Delete(context.Context, *ActivityIdRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedActivityServiceServer) CreateActivityType(context.Context, *CreateActivityTypeRequest) (*ActivityType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActivityType not implemented")
}
func (UnimplementedActivityServiceServer) UpdateActivityType(context.Context, *UpdateActivityTypeRequest) (*ActivityType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActivityType not implemented")
}
func (UnimplementedActivityServiceServer) GetActivityType(context.Context, *ActivityTypeIdRequest) (*ActivityType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivityType not implemented")
}
func (UnimplementedActivityServiceServer) ListActivityTypes(context.Context, *ListActivityTypesRequest) (*ListActivityTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActivityTypes not implemented")
}
func (UnimplementedActivityServiceServer) DeleteActivityType(context.Context, *ActivityTypeIdRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActivityType not implemented")
}
func (UnimplementedActivityServiceServer) mustEmbedUnimplementedActivityServiceServer() {}

// UnsafeActivityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityServiceServer will
// result in compilation errors.
type UnsafeActivityServiceServer interface {
	mustEmbedUnimplementedActivityServiceServer()
}

func RegisterActivityServiceServer(s grpc.ServiceRegistrar, srv ActivityServiceServer) {
	s.RegisterService(&ActivityService_ServiceDesc, srv)
}

func _ActivityService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.ActivityService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).Create(ctx, req.(*CreateActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.ActivityService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).Update(ctx, req.(*UpdateActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.ActivityService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).Get(ctx, req.(*ActivityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_ListActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).ListActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.ActivityService/ListActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).ListActivities(ctx, req.(*ListActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_ListActivitiesByFamily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActivitiesByFamilyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).ListActivitiesByFamily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.ActivityService/ListActivitiesByFamily",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).ListActivitiesByFamily(ctx, req.(*ListActivitiesByFamilyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.ActivityService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).Delete(ctx, req.(*ActivityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_CreateActivityType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActivityTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).CreateActivityType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.ActivityService/CreateActivityType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).CreateActivityType(ctx, req.(*CreateActivityTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_UpdateActivityType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActivityTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).UpdateActivityType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.ActivityService/UpdateActivityType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).UpdateActivityType(ctx, req.(*UpdateActivityTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetActivityType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityTypeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetActivityType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.ActivityService/GetActivityType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetActivityType(ctx, req.(*ActivityTypeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_ListActivityTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActivityTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).ListActivityTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.ActivityService/ListActivityTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).ListActivityTypes(ctx, req.(*ListActivityTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_DeleteActivityType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityTypeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).DeleteActivityType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.ActivityService/DeleteActivityType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).DeleteActivityType(ctx, req.(*ActivityTypeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityService_ServiceDesc is the grpc.ServiceDesc for ActivityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "activity.ActivityService",
	HandlerType: (*ActivityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ActivityService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ActivityService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ActivityService_Get_Handler,
		},
		{
			MethodName: "ListActivities",
			Handler:    _ActivityService_ListActivities_Handler,
		},
		{
			MethodName: "ListActivitiesByFamily",
			Handler:    _ActivityService_ListActivitiesByFamily_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ActivityService_Delete_Handler,
		},
		{
			MethodName: "CreateActivityType",
			Handler:    _ActivityService_CreateActivityType_Handler,
		},
		{
			MethodName: "UpdateActivityType",
			Handler:    _ActivityService_UpdateActivityType_Handler,
		},
		{
			MethodName: "GetActivityType",
			Handler:    _ActivityService_GetActivityType_Handler,
		},
		{
			MethodName: "ListActivityTypes",
			Handler:    _ActivityService_ListActivityTypes_Handler,
		},
		{
			MethodName: "DeleteActivityType",
			Handler:    _ActivityService_DeleteActivityType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activity/activity.proto",
}
